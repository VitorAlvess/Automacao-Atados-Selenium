from __future__ import print_function

import os.path

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/contacts']


def main():
    """Shows basic usage of the People API.
    Prints the name of the first 10 connections.
    """
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token2.json'):
        creds = Credentials.from_authorized_user_file('token2.json', SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token2.json', 'w') as token:
            token.write(creds.to_json())

    try:
        #Valores que vão ser recebidos de outro arquivo
        valores_final = [['Danilo Figueiredo da Costaa', 'dci.infoseg@gmail.com', '(11) 95288-4737', '10/07/2022 21:19:41 +0000', 'Expert em Notebook', 'unapplied-by-deactivation', 'Instituo Center Norte', '07/04/1979', 'São Paulo, SP, Brasil'], ['Miriam Aharonovitss', 'miriam.aharonovitz@gmail.com', '(11) 97280-4493', '14/05/2022 01:36:18 +0000', 'Professor(a) de Gramática', 'confirmed-volunteer', 'Atados', '21/01/1991', 'São Paulo, SP, Brasil'], ['', '', '', '', '', '', '', '', '']]

        service = build('people', 'v1', credentials=creds)
    
        #Criar contato
        for valores in valores_final:
            if valores[0] == '':
                break
            contact = service.people().createContact(
                body={
                "names": [
                    {
                    "givenName": valores[0],
                    'familyName': ''
                    }
                ],
                "emailAddresses": [
                    {
                    "value": valores[1],
                    "type": "work"
                    }
                ],
                "phoneNumbers": [
                    {
                    "value": valores[2],
                    "type": "mobile"
                    }
                ],
                "organizations": [
                    {
                    "name": "",
                    "title": valores[4]
                    }
                ]
                }
            ).execute()
    except HttpError as err:
        print(err)


if __name__ == '__main__':
    main()